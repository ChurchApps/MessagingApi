service: messaging-api

package:
  individually: true
  exclude:
    - node_modules/**
    - layer/**
    - tools/**
    - "*.md"
    - "*.json"
    - ".git*"

custom:
  env: ${lower(${opt:stage, self:provider.stage})}
  vpcSettings:
    prod:
      securityGroupIds:
        - sg-052314a1eec2f2567
      subnetIds:
        - subnet-01a6b61d749d10c46
    current: ${ternary( ${self:custom.env}, prod, ${self:custom.vpcSettings.prod}, ~ )}

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024 # Keep 1024MB for WebSocket handling
  timeout: 10
  region: us-east-2
  iam:
    role: arn:aws:iam::428019619026:role/ChurchAppsRole
  environment:
    APP_ENV: ${self:custom.env}
  logs:
    httpApi:
      logRetentionInDays: 1
  httpApi:
    binaryMediaTypes:
      - "*/*"
  apiGateway:
    throttle:
      rateLimit: 5 # 5 requests per second per IP
      burstLimit: 20 # Allow bursts up to 20 requests per second

layers:
  dependencies:
    path: layer
    name: ${self:service}-dependencies-${self:custom.env}
    description: Dependencies layer for ${self:service}
    compatibleRuntimes:
      - nodejs20.x
    retain: false

functions:
  web:
    handler: LambdaEntry.handleWeb
    memorySize: 512 # Reduced from 1024MB for HTTP API
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - http:
          path: /
          method: ANY
          cors: true
    vpc: ${self:custom.vpcSettings.current}
  socket:
    handler: LambdaEntry.handleSocket
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - websocket: $default
      - websocket: $disconnect
    vpc: ${self:custom.vpcSettings.current}
  timer15Min:
    handler: LambdaEntry.timer15Min
    memorySize: 256 # Reduced from 1024MB for lightweight timer
    timeout: 60 # Add explicit timeout for scheduled task
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - schedule: rate(30 minutes) # Reduced frequency from 15 to 30 minutes for cost optimization
    vpc: ${self:custom.vpcSettings.current}
  timerMidnight:
    handler: LambdaEntry.timerMidnight
    memorySize: 256 # Reduced from 1024MB for lightweight timer
    timeout: 120 # Add explicit timeout for scheduled task
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - schedule: cron(0 5 * * ? *)
    vpc: ${self:custom.vpcSettings.current}

plugins:
  - serverless-plugin-utils
